name: create-ephemeral-environment



on:
  push:
    branches:
      - 'feat/**'
  pull_request:
    branches:
      - 'feat/**'
    types: [opened, synchronize, reopened, closed]



jobs:

  # This job uses a path filter to determine if the workflow should proceed based on changes in the 'apps/**.ts' directory
  paths-filter:
    runs-on: ubuntu-22.04
    outputs:
      apps: ${{ steps.filter.outputs.apps }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        base: devops
        filters: |
          apps:
            - 'apps/**.ts'

  build:
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        app: [ 'api', 'client', 'dashboard' ]

    runs-on: ubuntu-22.04
    needs: paths-filter
    if: ${{ needs.paths-filter.outputs.apps == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: build-and-push-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/${{ matrix.app }}/Dockerfile
          tags: ghcr.io/baumstern/${{ matrix.app }}:dev-${{ github.sha }}
          push: true

  deploy:
    runs-on: ubuntu-22.04
    needs: build
    defaults:
      run:
        working-directory: ./terraform/development

    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.2"

      - name: Prepare backend config
        run: |
          sed -i "s/key = \".*\"/key = \"${GITHUB_REF_NAME}\"/" terraform/development/backend.conf
          cat terraform/development/backend.conf

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_CLI_ARGS: '-backend-config="bucket=${{ secrets.STATE_BUCKET }}" '

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_CLI_ARGS: '-var "api_image_tag=dev-${{ github.sha }}" -var "client_image_tag=dev-${{ github.sha }}" -var "dashboard_image_tag=dev-${{ github.sha }}'

  cleanup:
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Destroy
      run: |
        terraform init
        terraform destroy -auto-approve
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
