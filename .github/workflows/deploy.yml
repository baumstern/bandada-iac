name: deploy-service

on:
  push:
    branches:
      - "main"

jobs:

  build:
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        app: [ 'api', 'client', 'dashboard' ]

    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
            node-version: 18.x

      - name: Install dependencies
        run: yarn install

      - name: Test code
        run: yarn test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: build-and-push-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/${{ matrix.app }}/Dockerfile
          tags: |
            ghcr.io/baumstern/${{ matrix.app }}:latest
            ghcr.io/baumstern/${{ matrix.app }}:${{ github.sha }}
          push: true

  deploy:
    needs: build
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./terraform/production
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.2"

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_CLI_ARGS: '-backend-config="bucket=${{ secrets.STATE_BUCKET }}"'


      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: ./terraform/production
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_CLI_ARGS: |
            -target=module.api
            -target=module.dashboard
            -target=module.client
            -var="api_image_tag=${{ github.sha }}"
            -var="dashboard_image_tag=${{ github.sha }}"
            -var="client_image_tag=${{ github.sha }}"


